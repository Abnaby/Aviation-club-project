
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  000009b0  00000a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007d  0080018a  0080018a  00000b6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002535  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1e  00000000  00000000  000032e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011fb  00000000  00000000  000040ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  000052fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001598  00000000  00000000  00005c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007206  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 30       	cpi	r26, 0x07	; 7
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  8a:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd1>:
	}
}

void LCD_clear1()
{
	LCD_cmd1(0x01);
  92:	82 bb       	out	0x12, r24	; 18
  94:	89 ef       	ldi	r24, 0xF9	; 249
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_cmd1+0x6>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_cmd1+0xc>
  9e:	00 00       	nop
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	89 ef       	ldi	r24, 0xF9	; 249
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_cmd1+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_cmd1+0x1c>
  ae:	00 00       	nop
  b0:	18 ba       	out	0x18, r1	; 24
  b2:	83 ec       	ldi	r24, 0xC3	; 195
  b4:	99 e0       	ldi	r25, 0x09	; 9
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_cmd1+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_cmd1+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <LCD4_cmd1>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd1>
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD4_cmd1+0xe>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD4_cmd1+0x14>
  d4:	00 00       	nop
  d6:	8c 2f       	mov	r24, r28
  d8:	82 95       	swap	r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd1>
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD4_cmd1+0x24>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD4_cmd1+0x2a>
  ea:	00 00       	nop
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <LCD_write1>:
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	84 e1       	ldi	r24, 0x14	; 20
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_write1+0xa>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_write1+0x10>
 100:	00 00       	nop
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	88 bb       	out	0x18, r24	; 24
 106:	83 ec       	ldi	r24, 0xC3	; 195
 108:	99 e0       	ldi	r25, 0x09	; 9
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_write1+0x1a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_write1+0x20>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <LCD4_write1>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_write1>
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD4_write1+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD4_write1+0x14>
 128:	00 00       	nop
 12a:	8c 2f       	mov	r24, r28
 12c:	82 95       	swap	r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_write1>
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD4_write1+0x24>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD4_write1+0x2a>
 13e:	00 00       	nop
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD4_write_string1>:
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	09 c0       	rjmp	.+18     	; 0x166 <LCD4_write_string1+0x22>
 154:	0e 94 8a 00 	call	0x114	; 0x114 <LCD4_write1>
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	c0 31       	cpi	r28, 0x10	; 16
 15c:	d1 05       	cpc	r29, r1
 15e:	19 f4       	brne	.+6      	; 0x166 <LCD4_write_string1+0x22>
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 166:	f8 01       	movw	r30, r16
 168:	81 91       	ld	r24, Z+
 16a:	8f 01       	movw	r16, r30
 16c:	81 11       	cpse	r24, r1
 16e:	f2 cf       	rjmp	.-28     	; 0x154 <LCD4_write_string1+0x10>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <LCD4_gotoxy1>:
 17a:	61 50       	subi	r22, 0x01	; 1
 17c:	71 09       	sbc	r23, r1
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	29 f4       	brne	.+10     	; 0x18e <LCD4_gotoxy1+0x14>
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	86 0f       	add	r24, r22
 188:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 18c:	08 95       	ret
 18e:	02 97       	sbiw	r24, 0x02	; 2
 190:	21 f4       	brne	.+8      	; 0x19a <LCD4_gotoxy1+0x20>
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	86 0f       	add	r24, r22
 196:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 19a:	08 95       	ret

0000019c <LCD4_clear1>:
}

void LCD4_clear1()
{
	LCD4_cmd1(0x01);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 1a2:	08 95       	ret

000001a4 <LCD4_init1>:
	_delay_ms(1);
}

void LCD4_init1()
{
	LCD4_cmd1(0x02);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	89 ef       	ldi	r24, 0xF9	; 249
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD4_init1+0xa>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD4_init1+0x10>
 1b4:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd1(0x28);
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 1bc:	89 ef       	ldi	r24, 0xF9	; 249
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD4_init1+0x1c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD4_init1+0x22>
 1c6:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd1(0x0c);
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD4_init1+0x2e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD4_init1+0x34>
 1d8:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd1(0x06);
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 1e0:	89 ef       	ldi	r24, 0xF9	; 249
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD4_init1+0x40>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD4_init1+0x46>
 1ea:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd1(0x80);
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd1>
 1f2:	89 ef       	ldi	r24, 0xF9	; 249
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD4_init1+0x52>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD4_init1+0x58>
 1fc:	00 00       	nop
	_delay_ms(1);
	LCD4_write_string1("LCD1 initialized correctly");
 1fe:	80 e6       	ldi	r24, 0x60	; 96
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD4_init1+0x66>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD4_init1+0x6c>
 210:	00 00       	nop
	_delay_ms(50);
	LCD4_clear1();
 212:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD4_clear1>
 216:	08 95       	ret

00000218 <LCD_cmd>:
	}
}

void LCD_clear()
{
	LCD_cmd(0x01);
 218:	85 bb       	out	0x15, r24	; 21
 21a:	89 ef       	ldi	r24, 0xF9	; 249
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_cmd+0x6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_cmd+0xc>
 224:	00 00       	nop
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	88 bb       	out	0x18, r24	; 24
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_cmd+0x16>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_cmd+0x1c>
 234:	00 00       	nop
 236:	18 ba       	out	0x18, r1	; 24
 238:	83 ec       	ldi	r24, 0xC3	; 195
 23a:	99 e0       	ldi	r25, 0x09	; 9
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_cmd+0x24>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_cmd+0x2a>
 242:	00 00       	nop
 244:	08 95       	ret

00000246 <LCD4_cmd>:
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_cmd>
 250:	89 ef       	ldi	r24, 0xF9	; 249
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD4_cmd+0xe>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD4_cmd+0x14>
 25a:	00 00       	nop
 25c:	8c 2f       	mov	r24, r28
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_cmd>
 266:	89 ef       	ldi	r24, 0xF9	; 249
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD4_cmd+0x24>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD4_cmd+0x2a>
 270:	00 00       	nop
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <LCD_write>:
 276:	85 bb       	out	0x15, r24	; 21
 278:	80 ea       	ldi	r24, 0xA0	; 160
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	89 ef       	ldi	r24, 0xF9	; 249
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_write+0xa>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_write+0x10>
 286:	00 00       	nop
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	83 ec       	ldi	r24, 0xC3	; 195
 28e:	99 e0       	ldi	r25, 0x09	; 9
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_write+0x1a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_write+0x20>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <LCD4_write>:
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_write>
 2a4:	89 ef       	ldi	r24, 0xF9	; 249
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD4_write+0xe>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD4_write+0x14>
 2ae:	00 00       	nop
 2b0:	8c 2f       	mov	r24, r28
 2b2:	82 95       	swap	r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_write>
 2ba:	89 ef       	ldi	r24, 0xF9	; 249
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD4_write+0x24>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD4_write+0x2a>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD4_write_string>:
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	8c 01       	movw	r16, r24
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <LCD4_write_string+0x22>
 2da:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD4_write>
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	c0 31       	cpi	r28, 0x10	; 16
 2e2:	d1 05       	cpc	r29, r1
 2e4:	19 f4       	brne	.+6      	; 0x2ec <LCD4_write_string+0x22>
 2e6:	80 ec       	ldi	r24, 0xC0	; 192
 2e8:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 2ec:	f8 01       	movw	r30, r16
 2ee:	81 91       	ld	r24, Z+
 2f0:	8f 01       	movw	r16, r30
 2f2:	81 11       	cpse	r24, r1
 2f4:	f2 cf       	rjmp	.-28     	; 0x2da <LCD4_write_string+0x10>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <LCD4_gotoxy>:
 300:	61 50       	subi	r22, 0x01	; 1
 302:	71 09       	sbc	r23, r1
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	91 05       	cpc	r25, r1
 308:	29 f4       	brne	.+10     	; 0x314 <LCD4_gotoxy+0x14>
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	86 0f       	add	r24, r22
 30e:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 312:	08 95       	ret
 314:	02 97       	sbiw	r24, 0x02	; 2
 316:	21 f4       	brne	.+8      	; 0x320 <LCD4_gotoxy+0x20>
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	86 0f       	add	r24, r22
 31c:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 320:	08 95       	ret

00000322 <LCD4_clear>:
}

void LCD4_clear()
{
	LCD4_cmd(0x01);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 328:	08 95       	ret

0000032a <LCD4_init>:
	_delay_ms(1);
}

void LCD4_init()
{
	LCD4_cmd(0x02);
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 330:	89 ef       	ldi	r24, 0xF9	; 249
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD4_init+0xa>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD4_init+0x10>
 33a:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x28);
 33c:	88 e2       	ldi	r24, 0x28	; 40
 33e:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD4_init+0x1c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD4_init+0x22>
 34c:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x0c);
 34e:	8c e0       	ldi	r24, 0x0C	; 12
 350:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 354:	89 ef       	ldi	r24, 0xF9	; 249
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD4_init+0x2e>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD4_init+0x34>
 35e:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x06);
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 366:	89 ef       	ldi	r24, 0xF9	; 249
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD4_init+0x40>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD4_init+0x46>
 370:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x80);
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	0e 94 23 01 	call	0x246	; 0x246 <LCD4_cmd>
 378:	89 ef       	ldi	r24, 0xF9	; 249
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD4_init+0x52>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD4_init+0x58>
 382:	00 00       	nop
	_delay_ms(1);
	LCD4_write_string("LCD0 initialized correctly");
 384:	8b e7       	ldi	r24, 0x7B	; 123
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
 38c:	83 ed       	ldi	r24, 0xD3	; 211
 38e:	90 e3       	ldi	r25, 0x30	; 48
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD4_init+0x66>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD4_init+0x6c>
 396:	00 00       	nop
	_delay_ms(50);
	LCD4_clear();
 398:	0e 94 91 01 	call	0x322	; 0x322 <LCD4_clear>
 39c:	08 95       	ret

0000039e <init_ADC>:
#include "ADC.h"
void init_ADC(void){
	ADMUX  |=(1<<REFS0); //AVCC with external capacitor at AREF pin
 39e:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2) ; //128 prescaler
 3a0:	86 b1       	in	r24, 0x06	; 6
 3a2:	87 60       	ori	r24, 0x07	; 7
 3a4:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); //ADC Enable
 3a6:	37 9a       	sbi	0x06, 7	; 6
	LCD4_gotoxy(1,1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
	LCD4_write_string("ADC initialized correctly");
 3b4:	86 e9       	ldi	r24, 0x96	; 150
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <init_ADC+0x22>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <init_ADC+0x28>
 3c6:	00 00       	nop
	_delay_ms(50);
	LCD4_clear();
 3c8:	0e 94 91 01 	call	0x322	; 0x322 <LCD4_clear>
 3cc:	08 95       	ret

000003ce <ADC_read>:

}
int ADC_read(){
	ADCSRA |= (1<< ADSC); // Start conversion if 1 conversion still running
 3ce:	36 9a       	sbi	0x06, 6	; 6
	// wait for conversion to complete
	// ADSC becomes '0' again
	while(ADCSRA & (1<<ADSC));
 3d0:	36 99       	sbic	0x06, 6	; 6
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <ADC_read+0x2>
	return ADC ;
 3d4:	84 b1       	in	r24, 0x04	; 4
 3d6:	95 b1       	in	r25, 0x05	; 5
}
 3d8:	08 95       	ret

000003da <digit_no>:
		print_checker (ADC_read()/2);
	
	}
}
uint8_t digit_no(uint8_t num){
   uint8_t count = 0;
 3da:	90 e0       	ldi	r25, 0x00	; 0
   do
   {
	   // Increment digit count 
	   count++;
	   // Remove last digit of 'num'
	   num /= 10;
 3dc:	2d ec       	ldi	r18, 0xCD	; 205
   uint8_t count = 0;
   /* Run loop till num is greater than 0 */
   do
   {
	   // Increment digit count 
	   count++;
 3de:	9f 5f       	subi	r25, 0xFF	; 255
	   // Remove last digit of 'num'
	   num /= 10;
 3e0:	82 9f       	mul	r24, r18
 3e2:	81 2d       	mov	r24, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	86 95       	lsr	r24
 3e8:	86 95       	lsr	r24
 3ea:	86 95       	lsr	r24
   } while(num != 0);
 3ec:	c1 f7       	brne	.-16     	; 0x3de <digit_no+0x4>
   return count ;
}
 3ee:	89 2f       	mov	r24, r25
 3f0:	08 95       	ret

000003f2 <print_checker>:
void print_checker(uint8_t value){
 3f2:	cf 93       	push	r28
 3f4:	c8 2f       	mov	r28, r24
		if (digit_no(value) >=3)
 3f6:	0e 94 ed 01 	call	0x3da	; 0x3da <digit_no>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	58 f0       	brcs	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		LCD4_write_string(itoa(value,c,10));
 3fe:	4a e0       	ldi	r20, 0x0A	; 10
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	6e e8       	ldi	r22, 0x8E	; 142
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	8c 2f       	mov	r24, r28
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 96 04 	call	0x92c	; 0x92c <itoa>
 40e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
 412:	12 c0       	rjmp	.+36     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		else{
			LCD4_write_string(itoa(value,c,10));
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	6e e8       	ldi	r22, 0x8E	; 142
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	8c 2f       	mov	r24, r28
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 96 04 	call	0x92c	; 0x92c <itoa>
 424:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
			LCD4_write_string(" ");
 428:	84 ed       	ldi	r24, 0xD4	; 212
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
			LCD4_write_string(" ");
 430:	84 ed       	ldi	r24, 0xD4	; 212
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
		}
}
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <main>:
				DDRC = 0xFF;         LCD 0                                               
				DDRD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(1<<PD4) LCD1                  
				DDRB = 0xFF;         LCD 0 LCD 1 (RS ,RW,EN) 
				LCD4_init()-LCD4_init1() : 4 Bit mode                       */
	/************************************************************************/
	DDRC = 0xFF;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;
 440:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(1<<PD4) ;
 442:	80 ef       	ldi	r24, 0xF0	; 240
 444:	81 bb       	out	0x11, r24	; 17
	LCD4_init();
 446:	0e 94 95 01 	call	0x32a	; 0x32a <LCD4_init>
	LCD4_init1();
 44a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD4_init1>
			initialize ADC0.
			Read from ADC
			Make array of character (c) for LCD
			itoa int to string                                               */
	/************************************************************************/
	init_ADC();
 44e:	0e 94 cf 01 	call	0x39e	; 0x39e <init_ADC>
	/************************************************************************/
	/* FOR UART                                                            */
	/************************************************************************/
	UART_init();
 452:	0e 94 b5 02 	call	0x56a	; 0x56a <UART_init>
			initialize TIMER0.
			TIMER1 will be enabled in ISR
			Read from TCNT1.                                                */
	/************************************************************************/
	//DDRD = 0b11111011;
	DDRD &=~(1<<PD2);
 456:	8a 98       	cbi	0x11, 2	; 17
	DDRA |= (1<<PA3);
 458:	d3 9a       	sbi	0x1a, 3	; 26
	// Labels :
	interrupt_init();
 45a:	0e 94 41 03 	call	0x682	; 0x682 <interrupt_init>
	LCD4_gotoxy(1,1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
	LCD4_write_string("Ultrasonic:");
 46a:	80 eb       	ldi	r24, 0xB0	; 176
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
	LCD4_gotoxy(2, 1);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
	LCD4_write_string("Temp in celi:");
 47e:	8c eb       	ldi	r24, 0xBC	; 188
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
	LCD4_gotoxy1(1,1);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD4_gotoxy1>
	LCD4_write_string1("Time left: ");
 492:	8a ec       	ldi	r24, 0xCA	; 202
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
	LCD4_gotoxy1(2, 1);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD4_gotoxy1>
	LCD4_write_string1("time now:");
 4a6:	86 ed       	ldi	r24, 0xD6	; 214
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
	//TIME LEFT
	rw_time_left();
 4ae:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <rw_time_left>
	//CURRENT TIME
	rw_current_time();
 4b2:	0e 94 15 03 	call	0x62a	; 0x62a <rw_current_time>
	//					________
	//	     10 us     |		|
	/*    Low	   ____|        |____________                               */
	/************************************************************************/
		//ultrasonic
		trigger();
 4b6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <trigger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	8a e1       	ldi	r24, 0x1A	; 26
 4bc:	8a 95       	dec	r24
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__stack+0x5d>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__stack+0x63>
		_delay_us(10);
		LCD4_gotoxy(1,12);
 4c2:	6c e0       	ldi	r22, 0x0C	; 12
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
		print_checker ((uint8_t)(tcnt/466.47));
 4ce:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <__data_end>
 4d2:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <__data_end+0x1>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 08 04 	call	0x810	; 0x810 <__floatunsisf>
 4de:	29 e2       	ldi	r18, 0x29	; 41
 4e0:	3c e3       	ldi	r19, 0x3C	; 60
 4e2:	49 ee       	ldi	r20, 0xE9	; 233
 4e4:	53 e4       	ldi	r21, 0x43	; 67
 4e6:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 4ea:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixunssfsi>
 4ee:	86 2f       	mov	r24, r22
 4f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <print_checker>
		//ADC
		LCD4_gotoxy(2,14);
 4f4:	6e e0       	ldi	r22, 0x0E	; 14
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
		print_checker (ADC_read()/2);
 500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ADC_read>
 504:	99 23       	and	r25, r25
 506:	0c f4       	brge	.+2      	; 0x50a <__stack+0xab>
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	95 95       	asr	r25
 50c:	87 95       	ror	r24
 50e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <print_checker>
 512:	d1 cf       	rjmp	.-94     	; 0x4b6 <__stack+0x57>

00000514 <__vector_1>:
/************************************************************************/
/* Ultrasonic logic change interrupt
	enable timer 0 to start counting                                    */
/************************************************************************/
ISR(INT0_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
	/************************************************************************/
	/* 0 to 1  from low to high
	   1 to 0  from high to low                                             */
	/************************************************************************/
	DDRB |= (1<<PB0);
 522:	b8 9a       	sbi	0x17, 0	; 23
	PORTB ^= (1<<PB0);
 524:	98 b3       	in	r25, 0x18	; 24
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	89 27       	eor	r24, r25
 52a:	88 bb       	out	0x18, r24	; 24
	if(logichange == 1) //1 mean rising edge
 52c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <logichange>
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	61 f4       	brne	.+24     	; 0x54c <__vector_1+0x38>
	{
		
		TCCR1B = 0;
 534:	1e bc       	out	0x2e, r1	; 46
		tcnt = TCNT1; 
 536:	8c b5       	in	r24, 0x2c	; 44
 538:	9d b5       	in	r25, 0x2d	; 45
 53a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <__data_end+0x1>
 53e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
		TCNT1 = 0;
 542:	1d bc       	out	0x2d, r1	; 45
 544:	1c bc       	out	0x2c, r1	; 44
		logichange = 0;
 546:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <logichange>
 54a:	08 c0       	rjmp	.+16     	; 0x55c <__vector_1+0x48>
	}
	else if(logichange==0) //0 mean falling edge
 54c:	81 11       	cpse	r24, r1
 54e:	06 c0       	rjmp	.+12     	; 0x55c <__vector_1+0x48>
	{
		TCCR1B |= 1<<CS10; // Start counting in timer1
 550:	8e b5       	in	r24, 0x2e	; 46
 552:	81 60       	ori	r24, 0x01	; 1
 554:	8e bd       	out	0x2e, r24	; 46
		logichange = 1;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <logichange>
	}
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <UART_init>:
#include "UART.h"
unsigned char string[20], x, i = 0;
void UART_init() /* Initialize UART */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN); /* Turn on transmission and reception */
 56a:	8a b1       	in	r24, 0x0a	; 10
 56c:	88 61       	ori	r24, 0x18	; 24
 56e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); /* Use 8-bit character sizes */
 570:	80 b5       	in	r24, 0x20	; 32
 572:	86 68       	ori	r24, 0x86	; 134
 574:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE; /* Load lower 8-bits of the baud rate value */
 576:	83 e3       	ldi	r24, 0x33	; 51
 578:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8); /* Load upper 8-bits*/
 57a:	10 bc       	out	0x20, r1	; 32
	/*receive character*/
	LCD4_write_string1("UART initialized correctly");
 57c:	80 ee       	ldi	r24, 0xE0	; 224
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 584:	83 ed       	ldi	r24, 0xD3	; 211
 586:	90 e3       	ldi	r25, 0x30	; 48
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <UART_init+0x1e>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <UART_init+0x24>
 58e:	00 00       	nop
	_delay_ms(50);
	LCD4_clear1();
 590:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD4_clear1>
 594:	08 95       	ret

00000596 <UART_RxChar>:
}
unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0); /* Wait till data is received */
 596:	5f 9b       	sbis	0x0b, 7	; 11
 598:	fe cf       	rjmp	.-4      	; 0x596 <UART_RxChar>
	return(UDR); /* Return the byte*/
 59a:	8c b1       	in	r24, 0x0c	; 12
}
 59c:	08 95       	ret

0000059e <UART_TxChar>:
void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));
 59e:	5d 9b       	sbis	0x0b, 5	; 11
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <UART_TxChar>
	UDR = ch ;
 5a2:	8c b9       	out	0x0c, r24	; 12
 5a4:	08 95       	ret

000005a6 <UART_TxString>:
}
void UART_TxString ( char *str) /*send string*/
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	fc 01       	movw	r30, r24
	unsigned char j=0;
	while (str[j]!=0) /* Send string till null */
 5ae:	80 81       	ld	r24, Z
 5b0:	88 23       	and	r24, r24
 5b2:	59 f0       	breq	.+22     	; 0x5ca <UART_TxString+0x24>
 5b4:	8f 01       	movw	r16, r30
 5b6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_TxChar( str[j]);
 5b8:	0e 94 cf 02 	call	0x59e	; 0x59e <UART_TxChar>
		j++;
 5bc:	cf 5f       	subi	r28, 0xFF	; 255
	UDR = ch ;
}
void UART_TxString ( char *str) /*send string*/
{
	unsigned char j=0;
	while (str[j]!=0) /* Send string till null */
 5be:	f8 01       	movw	r30, r16
 5c0:	ec 0f       	add	r30, r28
 5c2:	f1 1d       	adc	r31, r1
 5c4:	80 81       	ld	r24, Z
 5c6:	81 11       	cpse	r24, r1
 5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <UART_TxString+0x12>
	{
		UART_TxChar( str[j]);
		j++;
	}
}
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <rw_time_left>:

void rw_time_left(void){
	LCD4_gotoxy1(1,11);
 5d2:	6b e0       	ldi	r22, 0x0B	; 11
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD4_gotoxy1>
	UART_TxString(">> Enter current time left in hours \n");
 5de:	8b ef       	ldi	r24, 0xFB	; 251
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_TxString>
	//UART_TxChar();
	while(1){
		x = UART_RxChar();
 5e6:	0e 94 cb 02 	call	0x596	; 0x596 <UART_RxChar>
 5ea:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <x>
		UART_TxChar(x);
 5ee:	0e 94 cf 02 	call	0x59e	; 0x59e <UART_TxChar>
		if (x!= 13 || x!=0x0D){
 5f2:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <x>
 5f6:	9d 30       	cpi	r25, 0x0D	; 13
 5f8:	59 f0       	breq	.+22     	; 0x610 <rw_time_left+0x3e>
			string[i] = x ;
 5fa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <i>
 5fe:	e8 2f       	mov	r30, r24
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	ed 50       	subi	r30, 0x0D	; 13
 604:	fe 4f       	sbci	r31, 0xFE	; 254
 606:	90 83       	st	Z, r25
			i++ ;
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <i>
			string[i] = '\0';
			i=0 ;
			//LCD4_write_string("Done");
			break;
		}
	}
 60e:	eb cf       	rjmp	.-42     	; 0x5e6 <rw_time_left+0x14>
			string[i] = x ;
			i++ ;
			//LCD4_write(x);
		}
		else{
			string[i] = '\0';
 610:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <i>
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	ed 50       	subi	r30, 0x0D	; 13
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	10 82       	st	Z, r1
			i=0 ;
 61c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <i>
			//LCD4_write_string("Done");
			break;
		}
	}
	LCD4_write_string1(string);
 620:	83 ef       	ldi	r24, 0xF3	; 243
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
 628:	08 95       	ret

0000062a <rw_current_time>:
}
rw_current_time(){
		LCD4_gotoxy1(2,10);
 62a:	6a e0       	ldi	r22, 0x0A	; 10
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD4_gotoxy1>
		UART_TxString(">> Enter current time as XX:XX \n");
 636:	81 e2       	ldi	r24, 0x21	; 33
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_TxString>
		//UART_TxChar();
		while(1){
			x = UART_RxChar();
 63e:	0e 94 cb 02 	call	0x596	; 0x596 <UART_RxChar>
 642:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <x>
			UART_TxChar(x);
 646:	0e 94 cf 02 	call	0x59e	; 0x59e <UART_TxChar>
			if (x!= 13 || x!=0x0D){
 64a:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <x>
 64e:	9d 30       	cpi	r25, 0x0D	; 13
 650:	59 f0       	breq	.+22     	; 0x668 <rw_current_time+0x3e>
				string[i] = x ;
 652:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <i>
 656:	e8 2f       	mov	r30, r24
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	ed 50       	subi	r30, 0x0D	; 13
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	90 83       	st	Z, r25
				i++ ;
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <i>
				string[i] = '\0';
				i=0 ;
				//LCD4_write_string("Done");
				break;
			}
		}
 666:	eb cf       	rjmp	.-42     	; 0x63e <rw_current_time+0x14>
				string[i] = x ;
				i++ ;
				//LCD4_write(x);
			}
			else{
				string[i] = '\0';
 668:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <i>
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	ed 50       	subi	r30, 0x0D	; 13
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	10 82       	st	Z, r1
				i=0 ;
 674:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <i>
				//LCD4_write_string("Done");
				break;
			}
		}
		LCD4_write_string1(string);
 678:	83 ef       	ldi	r24, 0xF3	; 243
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 a2 00 	call	0x144	; 0x144 <LCD4_write_string1>
 680:	08 95       	ret

00000682 <interrupt_init>:
	/************************************************************************/
	/*                      Timer0 is 8bit timer 0 --> 255 and overflow     */
	/************************************************************************/
	TCCR0 |= (1<<CS00);
	TCNT0 = 0 ;
	TIMSK |=(1<<TOIE0);
 682:	85 b7       	in	r24, 0x35	; 53
 684:	81 60       	ori	r24, 0x01	; 1
 686:	85 bf       	out	0x35, r24	; 53
 688:	8b b7       	in	r24, 0x3b	; 59
 68a:	80 64       	ori	r24, 0x40	; 64
 68c:	8b bf       	out	0x3b, r24	; 59
 68e:	78 94       	sei
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 80 01 	call	0x300	; 0x300 <LCD4_gotoxy>
 69c:	89 e6       	ldi	r24, 0x69	; 105
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD4_write_string>
 6a4:	8f e4       	ldi	r24, 0x4F	; 79
 6a6:	93 ec       	ldi	r25, 0xC3	; 195
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <interrupt_init+0x26>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <interrupt_init+0x2c>
 6ae:	00 00       	nop
 6b0:	0e 94 91 01 	call	0x322	; 0x322 <LCD4_clear>
 6b4:	08 95       	ret

000006b6 <trigger>:
	
}
void trigger(void){
		trigDir &= ~(1<<trigPin);
 6b6:	d3 98       	cbi	0x1a, 3	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	8a 95       	dec	r24
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <trigger+0x4>
 6be:	00 00       	nop
		_delay_us(10);
		trigDir |= (1<<trigPin);
 6c0:	d3 9a       	sbi	0x1a, 3	; 26
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	8a 95       	dec	r24
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <trigger+0xe>
 6c8:	00 00       	nop
		_delay_us(10);
		trigDir &= ~(1<<trigPin);
 6ca:	d3 98       	cbi	0x1a, 3	; 26
 6cc:	08 95       	ret

000006ce <__divsf3>:
 6ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3x>
 6d2:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_round>
 6d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_pscB>
 6da:	58 f0       	brcs	.+22     	; 0x6f2 <__divsf3+0x24>
 6dc:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_pscA>
 6e0:	40 f0       	brcs	.+16     	; 0x6f2 <__divsf3+0x24>
 6e2:	29 f4       	brne	.+10     	; 0x6ee <__divsf3+0x20>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	29 f0       	breq	.+10     	; 0x6f2 <__divsf3+0x24>
 6e8:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_inf>
 6ec:	51 11       	cpse	r21, r1
 6ee:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_szero>
 6f2:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_nan>

000006f6 <__divsf3x>:
 6f6:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_split3>
 6fa:	68 f3       	brcs	.-38     	; 0x6d6 <__divsf3+0x8>

000006fc <__divsf3_pse>:
 6fc:	99 23       	and	r25, r25
 6fe:	b1 f3       	breq	.-20     	; 0x6ec <__divsf3+0x1e>
 700:	55 23       	and	r21, r21
 702:	91 f3       	breq	.-28     	; 0x6e8 <__divsf3+0x1a>
 704:	95 1b       	sub	r25, r21
 706:	55 0b       	sbc	r21, r21
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	62 17       	cp	r22, r18
 70e:	73 07       	cpc	r23, r19
 710:	84 07       	cpc	r24, r20
 712:	38 f0       	brcs	.+14     	; 0x722 <__divsf3_pse+0x26>
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	5f 4f       	sbci	r21, 0xFF	; 255
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	44 1f       	adc	r20, r20
 71e:	aa 1f       	adc	r26, r26
 720:	a9 f3       	breq	.-22     	; 0x70c <__divsf3_pse+0x10>
 722:	35 d0       	rcall	.+106    	; 0x78e <__divsf3_pse+0x92>
 724:	0e 2e       	mov	r0, r30
 726:	3a f0       	brmi	.+14     	; 0x736 <__divsf3_pse+0x3a>
 728:	e0 e8       	ldi	r30, 0x80	; 128
 72a:	32 d0       	rcall	.+100    	; 0x790 <__divsf3_pse+0x94>
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	e6 95       	lsr	r30
 732:	00 1c       	adc	r0, r0
 734:	ca f7       	brpl	.-14     	; 0x728 <__divsf3_pse+0x2c>
 736:	2b d0       	rcall	.+86     	; 0x78e <__divsf3_pse+0x92>
 738:	fe 2f       	mov	r31, r30
 73a:	29 d0       	rcall	.+82     	; 0x78e <__divsf3_pse+0x92>
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	bb 1f       	adc	r27, r27
 744:	26 17       	cp	r18, r22
 746:	37 07       	cpc	r19, r23
 748:	48 07       	cpc	r20, r24
 74a:	ab 07       	cpc	r26, r27
 74c:	b0 e8       	ldi	r27, 0x80	; 128
 74e:	09 f0       	breq	.+2      	; 0x752 <__divsf3_pse+0x56>
 750:	bb 0b       	sbc	r27, r27
 752:	80 2d       	mov	r24, r0
 754:	bf 01       	movw	r22, r30
 756:	ff 27       	eor	r31, r31
 758:	93 58       	subi	r25, 0x83	; 131
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	3a f0       	brmi	.+14     	; 0x76c <__divsf3_pse+0x70>
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	51 05       	cpc	r21, r1
 762:	78 f0       	brcs	.+30     	; 0x782 <__divsf3_pse+0x86>
 764:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_inf>
 768:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_szero>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	e4 f3       	brlt	.-8      	; 0x768 <__divsf3_pse+0x6c>
 770:	98 3e       	cpi	r25, 0xE8	; 232
 772:	d4 f3       	brlt	.-12     	; 0x768 <__divsf3_pse+0x6c>
 774:	86 95       	lsr	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f7 95       	ror	r31
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	c9 f7       	brne	.-14     	; 0x774 <__divsf3_pse+0x78>
 782:	88 0f       	add	r24, r24
 784:	91 1d       	adc	r25, r1
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret
 78e:	e1 e0       	ldi	r30, 0x01	; 1
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	bb 1f       	adc	r27, r27
 798:	62 17       	cp	r22, r18
 79a:	73 07       	cpc	r23, r19
 79c:	84 07       	cpc	r24, r20
 79e:	ba 07       	cpc	r27, r26
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__divsf3_pse+0xae>
 7a2:	62 1b       	sub	r22, r18
 7a4:	73 0b       	sbc	r23, r19
 7a6:	84 0b       	sbc	r24, r20
 7a8:	ba 0b       	sbc	r27, r26
 7aa:	ee 1f       	adc	r30, r30
 7ac:	88 f7       	brcc	.-30     	; 0x790 <__divsf3_pse+0x94>
 7ae:	e0 95       	com	r30
 7b0:	08 95       	ret

000007b2 <__fixunssfsi>:
 7b2:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_splitA>
 7b6:	88 f0       	brcs	.+34     	; 0x7da <__fixunssfsi+0x28>
 7b8:	9f 57       	subi	r25, 0x7F	; 127
 7ba:	98 f0       	brcs	.+38     	; 0x7e2 <__fixunssfsi+0x30>
 7bc:	b9 2f       	mov	r27, r25
 7be:	99 27       	eor	r25, r25
 7c0:	b7 51       	subi	r27, 0x17	; 23
 7c2:	b0 f0       	brcs	.+44     	; 0x7f0 <__fixunssfsi+0x3e>
 7c4:	e1 f0       	breq	.+56     	; 0x7fe <__fixunssfsi+0x4c>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	1a f0       	brmi	.+6      	; 0x7d6 <__fixunssfsi+0x24>
 7d0:	ba 95       	dec	r27
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__fixunssfsi+0x14>
 7d4:	14 c0       	rjmp	.+40     	; 0x7fe <__fixunssfsi+0x4c>
 7d6:	b1 30       	cpi	r27, 0x01	; 1
 7d8:	91 f0       	breq	.+36     	; 0x7fe <__fixunssfsi+0x4c>
 7da:	0e 94 8f 04 	call	0x91e	; 0x91e <__fp_zero>
 7de:	b1 e0       	ldi	r27, 0x01	; 1
 7e0:	08 95       	ret
 7e2:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_zero>
 7e6:	67 2f       	mov	r22, r23
 7e8:	78 2f       	mov	r23, r24
 7ea:	88 27       	eor	r24, r24
 7ec:	b8 5f       	subi	r27, 0xF8	; 248
 7ee:	39 f0       	breq	.+14     	; 0x7fe <__fixunssfsi+0x4c>
 7f0:	b9 3f       	cpi	r27, 0xF9	; 249
 7f2:	cc f3       	brlt	.-14     	; 0x7e6 <__fixunssfsi+0x34>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b3 95       	inc	r27
 7fc:	d9 f7       	brne	.-10     	; 0x7f4 <__fixunssfsi+0x42>
 7fe:	3e f4       	brtc	.+14     	; 0x80e <__fixunssfsi+0x5c>
 800:	90 95       	com	r25
 802:	80 95       	com	r24
 804:	70 95       	com	r23
 806:	61 95       	neg	r22
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__floatunsisf>:
 810:	e8 94       	clt
 812:	09 c0       	rjmp	.+18     	; 0x826 <__floatsisf+0x12>

00000814 <__floatsisf>:
 814:	97 fb       	bst	r25, 7
 816:	3e f4       	brtc	.+14     	; 0x826 <__floatsisf+0x12>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	99 23       	and	r25, r25
 828:	a9 f0       	breq	.+42     	; 0x854 <__floatsisf+0x40>
 82a:	f9 2f       	mov	r31, r25
 82c:	96 e9       	ldi	r25, 0x96	; 150
 82e:	bb 27       	eor	r27, r27
 830:	93 95       	inc	r25
 832:	f6 95       	lsr	r31
 834:	87 95       	ror	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	f1 11       	cpse	r31, r1
 83e:	f8 cf       	rjmp	.-16     	; 0x830 <__floatsisf+0x1c>
 840:	fa f4       	brpl	.+62     	; 0x880 <__floatsisf+0x6c>
 842:	bb 0f       	add	r27, r27
 844:	11 f4       	brne	.+4      	; 0x84a <__floatsisf+0x36>
 846:	60 ff       	sbrs	r22, 0
 848:	1b c0       	rjmp	.+54     	; 0x880 <__floatsisf+0x6c>
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	16 c0       	rjmp	.+44     	; 0x880 <__floatsisf+0x6c>
 854:	88 23       	and	r24, r24
 856:	11 f0       	breq	.+4      	; 0x85c <__floatsisf+0x48>
 858:	96 e9       	ldi	r25, 0x96	; 150
 85a:	11 c0       	rjmp	.+34     	; 0x87e <__floatsisf+0x6a>
 85c:	77 23       	and	r23, r23
 85e:	21 f0       	breq	.+8      	; 0x868 <__floatsisf+0x54>
 860:	9e e8       	ldi	r25, 0x8E	; 142
 862:	87 2f       	mov	r24, r23
 864:	76 2f       	mov	r23, r22
 866:	05 c0       	rjmp	.+10     	; 0x872 <__floatsisf+0x5e>
 868:	66 23       	and	r22, r22
 86a:	71 f0       	breq	.+28     	; 0x888 <__floatsisf+0x74>
 86c:	96 e8       	ldi	r25, 0x86	; 134
 86e:	86 2f       	mov	r24, r22
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	2a f0       	brmi	.+10     	; 0x880 <__floatsisf+0x6c>
 876:	9a 95       	dec	r25
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	da f7       	brpl	.-10     	; 0x876 <__floatsisf+0x62>
 880:	88 0f       	add	r24, r24
 882:	96 95       	lsr	r25
 884:	87 95       	ror	r24
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

0000088a <__fp_inf>:
 88a:	97 f9       	bld	r25, 7
 88c:	9f 67       	ori	r25, 0x7F	; 127
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	08 95       	ret

00000896 <__fp_nan>:
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	80 ec       	ldi	r24, 0xC0	; 192
 89a:	08 95       	ret

0000089c <__fp_pscA>:
 89c:	00 24       	eor	r0, r0
 89e:	0a 94       	dec	r0
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	09 06       	cpc	r0, r25
 8a8:	08 95       	ret

000008aa <__fp_pscB>:
 8aa:	00 24       	eor	r0, r0
 8ac:	0a 94       	dec	r0
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	05 06       	cpc	r0, r21
 8b6:	08 95       	ret

000008b8 <__fp_round>:
 8b8:	09 2e       	mov	r0, r25
 8ba:	03 94       	inc	r0
 8bc:	00 0c       	add	r0, r0
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0xc>
 8c0:	88 23       	and	r24, r24
 8c2:	52 f0       	brmi	.+20     	; 0x8d8 <__fp_round+0x20>
 8c4:	bb 0f       	add	r27, r27
 8c6:	40 f4       	brcc	.+16     	; 0x8d8 <__fp_round+0x20>
 8c8:	bf 2b       	or	r27, r31
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <__fp_round+0x18>
 8cc:	60 ff       	sbrs	r22, 0
 8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__fp_round+0x20>
 8d0:	6f 5f       	subi	r22, 0xFF	; 255
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__fp_split3>:
 8da:	57 fd       	sbrc	r21, 7
 8dc:	90 58       	subi	r25, 0x80	; 128
 8de:	44 0f       	add	r20, r20
 8e0:	55 1f       	adc	r21, r21
 8e2:	59 f0       	breq	.+22     	; 0x8fa <__fp_splitA+0x10>
 8e4:	5f 3f       	cpi	r21, 0xFF	; 255
 8e6:	71 f0       	breq	.+28     	; 0x904 <__fp_splitA+0x1a>
 8e8:	47 95       	ror	r20

000008ea <__fp_splitA>:
 8ea:	88 0f       	add	r24, r24
 8ec:	97 fb       	bst	r25, 7
 8ee:	99 1f       	adc	r25, r25
 8f0:	61 f0       	breq	.+24     	; 0x90a <__fp_splitA+0x20>
 8f2:	9f 3f       	cpi	r25, 0xFF	; 255
 8f4:	79 f0       	breq	.+30     	; 0x914 <__fp_splitA+0x2a>
 8f6:	87 95       	ror	r24
 8f8:	08 95       	ret
 8fa:	12 16       	cp	r1, r18
 8fc:	13 06       	cpc	r1, r19
 8fe:	14 06       	cpc	r1, r20
 900:	55 1f       	adc	r21, r21
 902:	f2 cf       	rjmp	.-28     	; 0x8e8 <__fp_split3+0xe>
 904:	46 95       	lsr	r20
 906:	f1 df       	rcall	.-30     	; 0x8ea <__fp_splitA>
 908:	08 c0       	rjmp	.+16     	; 0x91a <__fp_splitA+0x30>
 90a:	16 16       	cp	r1, r22
 90c:	17 06       	cpc	r1, r23
 90e:	18 06       	cpc	r1, r24
 910:	99 1f       	adc	r25, r25
 912:	f1 cf       	rjmp	.-30     	; 0x8f6 <__fp_splitA+0xc>
 914:	86 95       	lsr	r24
 916:	71 05       	cpc	r23, r1
 918:	61 05       	cpc	r22, r1
 91a:	08 94       	sec
 91c:	08 95       	ret

0000091e <__fp_zero>:
 91e:	e8 94       	clt

00000920 <__fp_szero>:
 920:	bb 27       	eor	r27, r27
 922:	66 27       	eor	r22, r22
 924:	77 27       	eor	r23, r23
 926:	cb 01       	movw	r24, r22
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret

0000092c <itoa>:
 92c:	45 32       	cpi	r20, 0x25	; 37
 92e:	51 05       	cpc	r21, r1
 930:	20 f4       	brcc	.+8      	; 0x93a <itoa+0xe>
 932:	42 30       	cpi	r20, 0x02	; 2
 934:	10 f0       	brcs	.+4      	; 0x93a <itoa+0xe>
 936:	0c 94 a1 04 	jmp	0x942	; 0x942 <__itoa_ncheck>
 93a:	fb 01       	movw	r30, r22
 93c:	10 82       	st	Z, r1
 93e:	cb 01       	movw	r24, r22
 940:	08 95       	ret

00000942 <__itoa_ncheck>:
 942:	bb 27       	eor	r27, r27
 944:	4a 30       	cpi	r20, 0x0A	; 10
 946:	31 f4       	brne	.+12     	; 0x954 <__itoa_ncheck+0x12>
 948:	99 23       	and	r25, r25
 94a:	22 f4       	brpl	.+8      	; 0x954 <__itoa_ncheck+0x12>
 94c:	bd e2       	ldi	r27, 0x2D	; 45
 94e:	90 95       	com	r25
 950:	81 95       	neg	r24
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__utoa_common>

00000958 <__utoa_ncheck>:
 958:	bb 27       	eor	r27, r27

0000095a <__utoa_common>:
 95a:	fb 01       	movw	r30, r22
 95c:	55 27       	eor	r21, r21
 95e:	aa 27       	eor	r26, r26
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	aa 1f       	adc	r26, r26
 966:	a4 17       	cp	r26, r20
 968:	10 f0       	brcs	.+4      	; 0x96e <__utoa_common+0x14>
 96a:	a4 1b       	sub	r26, r20
 96c:	83 95       	inc	r24
 96e:	50 51       	subi	r21, 0x10	; 16
 970:	b9 f7       	brne	.-18     	; 0x960 <__utoa_common+0x6>
 972:	a0 5d       	subi	r26, 0xD0	; 208
 974:	aa 33       	cpi	r26, 0x3A	; 58
 976:	08 f0       	brcs	.+2      	; 0x97a <__utoa_common+0x20>
 978:	a9 5d       	subi	r26, 0xD9	; 217
 97a:	a1 93       	st	Z+, r26
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	79 f7       	brne	.-34     	; 0x95e <__utoa_common+0x4>
 980:	b1 11       	cpse	r27, r1
 982:	b1 93       	st	Z+, r27
 984:	11 92       	st	Z+, r1
 986:	cb 01       	movw	r24, r22
 988:	0c 94 c6 04 	jmp	0x98c	; 0x98c <strrev>

0000098c <strrev>:
 98c:	dc 01       	movw	r26, r24
 98e:	fc 01       	movw	r30, r24
 990:	67 2f       	mov	r22, r23
 992:	71 91       	ld	r23, Z+
 994:	77 23       	and	r23, r23
 996:	e1 f7       	brne	.-8      	; 0x990 <strrev+0x4>
 998:	32 97       	sbiw	r30, 0x02	; 2
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <strrev+0x18>
 99c:	7c 91       	ld	r23, X
 99e:	6d 93       	st	X+, r22
 9a0:	70 83       	st	Z, r23
 9a2:	62 91       	ld	r22, -Z
 9a4:	ae 17       	cp	r26, r30
 9a6:	bf 07       	cpc	r27, r31
 9a8:	c8 f3       	brcs	.-14     	; 0x99c <strrev+0x10>
 9aa:	08 95       	ret

000009ac <_exit>:
 9ac:	f8 94       	cli

000009ae <__stop_program>:
 9ae:	ff cf       	rjmp	.-2      	; 0x9ae <__stop_program>
